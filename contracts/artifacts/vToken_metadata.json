{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "VTokenTransfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "asset",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "assetBalanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_shares",
						"type": "uint256"
					}
				],
				"name": "assetDataOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "maxShares",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountInAsset",
								"type": "uint256"
							}
						],
						"internalType": "struct IvToken.AssetData",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "burnFor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_registry",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "lastAssetBalanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "mintFor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "mintableShares",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "registry",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amountInAsset",
						"type": "uint256"
					}
				],
				"name": "shareChange",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "newShares",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "oldShares",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "_interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sync",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalAssetSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "transferAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_shares",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC-20 token failed."
					}
				]
			},
			"events": {
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				}
			},
			"kind": "dev",
			"methods": {
				"assetBalanceOf(address)": {
					"params": {
						"_account": "Address to check balance of"
					},
					"returns": {
						"_0": "Returns asset balance of the given address"
					}
				},
				"assetDataOf(address,uint256)": {
					"returns": {
						"_0": "Amount of assets for the given account with the given shares amount"
					}
				},
				"balanceOf(address)": {
					"params": {
						"_account": "Address to check balance of"
					},
					"returns": {
						"_0": "Returns shares balance of the given address"
					}
				},
				"burn(address)": {
					"params": {
						"_recipient": "Recipient to send assets to"
					},
					"returns": {
						"amount": "Amount of sent assets"
					}
				},
				"burnFor(address)": {
					"params": {
						"_recipient": "Recipient to send assets to"
					},
					"returns": {
						"_0": "Returns amount of sent assets"
					}
				},
				"constructor": {
					"custom:oz-upgrades-unsafe-allow": "constructor"
				},
				"initialize(address,address)": {
					"details": "also sets initial values for public variables",
					"params": {
						"_asset": "Asset that will be stored",
						"_registry": "Index registry address"
					}
				},
				"lastAssetBalanceOf(address)": {
					"params": {
						"_account": "Address to check balance of"
					},
					"returns": {
						"_0": "Returns last asset balance for the given address"
					}
				},
				"lastBalance()": {
					"returns": {
						"_0": "Returns last shares balance"
					}
				},
				"mint()": {
					"returns": {
						"shares": "Amount of minted shares"
					}
				},
				"mintFor(address)": {
					"params": {
						"_recipient": "Recipient to mint shares for"
					},
					"returns": {
						"_0": "Returns minted shares amount"
					}
				},
				"mintableShares(uint256)": {
					"params": {
						"_amount": "Amount of assets to mint shares for"
					},
					"returns": {
						"_0": "Returns amount of shares available for minting"
					}
				},
				"shareChange(address,uint256)": {
					"params": {
						"_account": "Account to calculate shares for",
						"_amountInAsset": "Amount of asset to calculate shares"
					},
					"returns": {
						"newShares": "New shares value",
						"oldShares": "Old shares value"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"totalAssetSupply()": {
					"returns": {
						"_0": "Returns total supply amount"
					}
				},
				"totalSupply()": {
					"returns": {
						"_0": "Returns total shares supply"
					}
				},
				"transfer(address,uint256)": {
					"params": {
						"_amount": "Amount of shares to transfer",
						"_recipient": "Account to transfer shares to"
					}
				},
				"transferAsset(address,uint256)": {
					"details": "Method is restricted to orderer",
					"params": {
						"_amount": "Amount to transfer",
						"_recipient": "Recipient address"
					}
				},
				"transferFrom(address,address,uint256)": {
					"params": {
						"_from": "Account to transfer shares from",
						"_shares": "Amount of shares to transfer",
						"_to": "Account to transfer shares to"
					}
				}
			},
			"stateVariables": {
				"asset": {
					"return": "Returns stored asset address",
					"returns": {
						"_0": "Returns stored asset address"
					}
				},
				"registry": {
					"return": "Returns index registry address",
					"returns": {
						"_0": "Returns index registry address"
					}
				}
			},
			"title": "Vault token",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"asset()": {
					"notice": "Stored asset address"
				},
				"assetBalanceOf(address)": {
					"notice": "Asset balance of the given address"
				},
				"assetDataOf(address,uint256)": {
					"notice": "Returns amount of assets for the given account with the given shares amount"
				},
				"balanceOf(address)": {
					"notice": "Shares balance of the given address"
				},
				"burn(address)": {
					"notice": "Burns shares for the given recipient and returns assets to the given recipient"
				},
				"burnFor(address)": {
					"notice": "Burns shares and sends assets to the given recipient"
				},
				"initialize(address,address)": {
					"notice": "Initializes vToken with the given parameters"
				},
				"lastAssetBalanceOf(address)": {
					"notice": "Last asset balance for the given address"
				},
				"lastBalance()": {
					"notice": "Last shares balance"
				},
				"mint()": {
					"notice": "Mints shares for the current sender"
				},
				"mintFor(address)": {
					"notice": "Mints shares for the given recipient"
				},
				"mintableShares(uint256)": {
					"notice": "Returns mintable amount of shares for given asset's amount"
				},
				"registry()": {
					"notice": "Index registry address"
				},
				"shareChange(address,uint256)": {
					"notice": "Returns the change in shares for a given amount of an asset"
				},
				"sync()": {
					"notice": "Manually synchronizes shares balances"
				},
				"totalAssetSupply()": {
					"notice": "Total supply amount: current balance + deposited using vault controller"
				},
				"totalSupply()": {
					"notice": "Total shares supply"
				},
				"transfer(address,uint256)": {
					"notice": "Transfers shares from the sender to the given recipient"
				},
				"transferAsset(address,uint256)": {
					"notice": "Transfers asset to the given recipient"
				},
				"transferFrom(address,address,uint256)": {
					"notice": "Transfers shares between given accounts"
				}
			},
			"notice": "Contains logic for index's asset management",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/vToken.sol": "vToken"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
				"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
			]
		},
		"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
			"keccak256": "0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b",
			"license": "MIT",
			"urls": [
				"bzz-raw://d27f4b23c2dee42394aebaf42bf238285230f472dfd3282a39c3f000ec28214f",
				"dweb:/ipfs/QmQa3DnvccwdWJeWrjgXPnFMTWbzWQWR39hVqC7eEwo2PC"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol": {
			"keccak256": "0x94edef8687cf1335a114f7e7267fa92cb0d9e61afde8d62589aceede6c245caf",
			"license": "MIT",
			"urls": [
				"bzz-raw://9dbcc182503f671c6bb7e2c24fe5f13e4c7604389d6cfccd074bc1d9fa7b86df",
				"dweb:/ipfs/QmdioHDNmTsJx9xMcwBvA7QJhC4MzTmDmWHiWsZpbETLXx"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
			"keccak256": "0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab",
			"license": "MIT",
			"urls": [
				"bzz-raw://3c8ccc75d1cd792d192aa09e54dd49ea35fe85baa9fcd17486f29227d9f29b89",
				"dweb:/ipfs/QmbboSbFUEiM9tdEgBwuTRb7bykFoJXZ7dsSr1PSREJXMr"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
			"keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
			"license": "MIT",
			"urls": [
				"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
				"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530",
			"license": "MIT",
			"urls": [
				"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0",
				"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1363.sol": {
			"keccak256": "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
			"license": "MIT",
			"urls": [
				"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
				"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
			"license": "MIT",
			"urls": [
				"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
				"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC20.sol": {
			"keccak256": "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
			"license": "MIT",
			"urls": [
				"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
				"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5",
			"license": "MIT",
			"urls": [
				"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508",
				"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"contracts/interfaces/IIndexFactory.sol": {
			"keccak256": "0xcbb3ec69a22392acb25efe78f5530cbabc6171821e24f91d8a2e79a9d30d1602",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://23d47e6da7f624cedba1364d3c6da860e7b6a07eb77d012798a2e07827afbe17",
				"dweb:/ipfs/QmVXz6PdSbDtgP9U2kNncw6hfqiTYGAhQNH6TPXYivfsVi"
			]
		},
		"contracts/interfaces/IIndexRegistry.sol": {
			"keccak256": "0xdd6bea5fd8616772355148ad0d10cbc0e7fcd8be491743c41103a6827174bca0",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b0e65d1c0e73c7858c237746aca274de1a8dbc8d9c9c3287e71b5192e7c91c80",
				"dweb:/ipfs/QmS26A79gqgtAkUgHHJ58m53GVaN6o8bMNPaVcME4LSHai"
			]
		},
		"contracts/interfaces/IvToken.sol": {
			"keccak256": "0x515128b8d3b5d9effa3017cc67ebb198d017c2c223fd5c04969427e9a3856b3d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://0ff8096dfebfaea3f3d3d446db3ba4eb792351169e1988b8ba53654425139b5a",
				"dweb:/ipfs/QmcE9kNDVhuiHHLcgPLdNf946RB4nMrBzNj4UfgiVBwtX7"
			]
		},
		"contracts/libraries/BP.sol": {
			"keccak256": "0xf37ab79860aded7258956e4e5c2a6f13baba415effd32f5df287392559f31e3c",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ca21253dd40d9b8b0a04a420091bb962f2a9ccd08c662b88e336de2c6d86e02a",
				"dweb:/ipfs/Qmb8VWLJ4xJt3ZtwdVEqLqxw768zjGAP7CMhjLpkhjDb9k"
			]
		},
		"contracts/libraries/NAV.sol": {
			"keccak256": "0x919dd95146b940c97a369b7822a9b5225480d6550d45a36a1c38b31ea840ddd8",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://4725da049c0354a105baaa9dd05476e6147c39287a35c54a1c737bbdc67e7c64",
				"dweb:/ipfs/QmVUueafrJ2UKy3aJZCPi4aT1JdQhM2fgTrgv5KLomeJae"
			]
		},
		"contracts/vToken.sol": {
			"keccak256": "0x82a225ba6b77f987318247bf5600a01cff214fa0271c8e6b166398876fa47fb8",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://9655458c329c6990103e9b2450a1ca1791dda2c58592ac8fec7450a8d8a7cfe8",
				"dweb:/ipfs/QmaYPPBkZZZBrGXnnx893QeuSgJmWCpj3RMsXWVkbw7pBw"
			]
		}
	},
	"version": 1
}